package org.burtelov.spotifyimporter.model.spotify;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.apache.http.HttpEntity;
import org.apache.http.HttpRequest;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.burtelov.spotifyimporter.model.musicdata.Playlist;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.springframework.beans.factory.annotation.Value;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.print.Doc;
import java.io.IOException;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.util.concurrent.TimeUnit;

public class JsoupRequest {
    //@Value("${imgBase64}")
    private static String imageBase64 = "";

    public static void joinUrl() {
        try {
            Document doc = Jsoup.connect("https://accounts.spotify.com/authorize")
                    .header("Accept-Language", "en")
                    .header("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8")
                    .data("grant_type", "code")
                    .data("client_id", "c700db30083545a6a05352d0304a0597")
                    .data("scope","playlist-modify-public+playlist-modify-private")
                    .data("redirect_uri", "redirect_uri=http%3A%2F%2Flocalhost%3A8888%2Fcallback")
                    .ignoreHttpErrors(true)
                    .ignoreContentType(true)
                    .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9"
                            + ",*/*;q=0.8")
                    .get();
            System.out.println(doc.text());
        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }

    public static String getToken(String code, String clientId, String clientSecret) {
        try {
            Document doc = Jsoup.connect("https://accounts.spotify.com/api/token")
                    .header("Accept-Language", "en")
                    .header("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8")
                    .data("grant_type", "authorization_code")
                    .data("client_id", clientId)
                    .data("client_secret", clientSecret)
                    .data("code", code)
                    .data("redirect_uri", "http://localhost:8888/callback")
                    .ignoreHttpErrors(true)
                    .ignoreContentType(true)
                    .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9"
                            + ",*/*;q=0.8")
                    .post();

            JsonParser parser = new JsonParser();
            JsonElement jsonElement = parser.parse(doc.text());

            JsonObject root = jsonElement.getAsJsonObject();
            String token = root.get("access_token").toString();

            return token.substring(1, token.length() - 1);

        } catch (IOException exception) {
            exception.printStackTrace();
        }
        return new Exception().getMessage();
    }

    private static SSLSocketFactory socketFactory() {
        TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            public void checkClientTrusted(X509Certificate[] certs, String authType) {
            }

            public void checkServerTrusted(X509Certificate[] certs, String authType) {
            }
        }};

        try {
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
            return sslContext.getSocketFactory();
        } catch (NoSuchAlgorithmException | KeyManagementException e) {
            throw new RuntimeException("Failed to create a SSL socket factory", e);
        }
    }

    public static void requestUploadImage(String playlistId, String accessToken) {
        try {

            CloseableHttpClient client = HttpClients.custom().setConnectionTimeToLive(10, TimeUnit.SECONDS).build();
            HttpPut response = new HttpPut("https://api.spotify.com/v1/playlists/"
                    + playlistId + "/images");

            response.setHeader("Accept-Language", "en");
            response.setHeader("Content-Type", "image/jpeg");
            response.setHeader("Accept", "application/json");
            response.setHeader("Authorization", "Bearer " + accessToken);

            System.out.println(response);
            System.out.println(response.getEntity());
            System.out.println(response.getURI());
            System.out.println(response.getRequestLine());


            response.setEntity(new StringEntity(""));

            CloseableHttpResponse httpResponse = client.execute(response);
            System.out.println(httpResponse.getStatusLine().getStatusCode());
            client.close();

        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }

    public static String updateToken(String refreshToken, String client_id) {
        try {
            Document doc = Jsoup.connect("https://accounts.spotify.com/api/token")
                    .header("Accept-Language", "en")
                    .header("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8")
                    .data("grant_type", "refresh_token")
                    .data("refresh_token", refreshToken)
                    .data("client_id", client_id)
                    .ignoreHttpErrors(true)
                    .ignoreContentType(true)
                    .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9"
                            + ",*/*;q=0.8")
                    .post();
            return doc.text();
        } catch (IOException exception) {
            exception.printStackTrace();
            return null;
        }
    }

    public static void requestAddItems(String playlistId, String uris, String accessToken) {
        try {
            Document doc = Jsoup.connect("https://api.spotify.com/v1/playlists/"
                    + playlistId + "/tracks")
                    .header("Accept-Language", "en")
                    .header("Content-Type", "application/json")
                    .method(Connection.Method.POST)
                    .ignoreHttpErrors(true)
                    .ignoreContentType(true)
                    .requestBody("{\"uris\": [" + uris + "]}")
                    .header("Accept", "application/json")
                    .header("Authorization", "Bearer " + accessToken)
                    .post();

            System.out.println("Playlist moved");

        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }

    public static void requestCreatePlaylist(Playlist playlist, String accessToken, String userId) {
        try {
            String doc = Jsoup.connect("https://api.spotify.com/v1/users/"+userId+"/playlists")
                    .header("Accept-Language", "en")
                    .header("Content-Type", "application/json")
                    .method(Connection.Method.POST)
                    .ignoreHttpErrors(true)
                    .ignoreContentType(true)
                    .requestBody("{" + "\"name\":" + "\"" +
                            playlist.getTitle() +
                            "\"," + "\"description\": \"\","
                            + "\"public\": true"+"}")
                    .header("Accept", "application/json")
                    .header("Authorization", "Bearer " + accessToken)
                    .execute()
                    .body();

            JsonParser parser = new JsonParser();
            JsonElement jsonElement = parser.parse(doc);

            JsonObject root = jsonElement.getAsJsonObject();
            String id = root.get("id").toString();

            playlist.setId(id.substring(1, id.length() - 1));

        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }

    public static String requestId(String q, String accessToken) {
        try {
            Document doc = Jsoup.connect("https://api.spotify.com/v1/search")
                    .header("Accept-Language", "en")
                    .header("Content-Type", "application/json")
                    .data("q", q)
                    .data("type", "track")
                    .data("limit", "1")
                    .data("offset", "0")
                    .ignoreHttpErrors(true)
                    .ignoreContentType(true)
                    .header("Accept", "application/json")
                    .header("Authorization", "Bearer " + accessToken)
                    .get();

            JsonParser parser = new JsonParser();
            JsonElement jsonElement = parser.parse(doc.text());

            JsonObject root = jsonElement.getAsJsonObject();

            if (root.get("tracks").getAsJsonObject()
                    .get("items").getAsJsonArray().size() != 0) {

                String id = root.get("tracks").getAsJsonObject()
                        .get("items").getAsJsonArray().
                                get(0).getAsJsonObject().
                                get("id").toString();

                return id.substring(1, id.length() - 1);
            }
            else return null;

        } catch (IOException exception) {
            exception.printStackTrace();
            return exception.getMessage();
        }
    }
}
